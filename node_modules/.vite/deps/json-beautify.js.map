{
  "version": 3,
  "sources": ["../../json-beautify/index.js"],
  "sourcesContent": ["\nvar rx_escapable = /[\\\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\nvar gap,\n    indent,\n    meta = { // table of character substitutions\n      '\\b': '\\\\b',\n      '\\t': '\\\\t',\n      '\\n': '\\\\n',\n      '\\f': '\\\\f',\n      '\\r': '\\\\r',\n      '\"': '\\\\\"',\n      '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n    rx_escapable.lastIndex = 0;\n    return rx_escapable.test(string)\n        ? '\"' + string.replace(rx_escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string'\n                ? c\n                : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"'\n        : '\"' + string + '\"';\n}\n\n\nfunction str(key, holder, limit) {\n\n// Produce a string from holder[key].\n\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n\n// What happens next depends on the value's type.\n\n    switch (typeof value) {\n    case 'string':\n        return quote(value);\n\n    case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n        return isFinite(value)\n            ? String(value)\n            : 'null';\n\n    case 'boolean':\n    case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n        return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n    case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n        if (!value) {\n            return 'null';\n        }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n        gap += indent;\n        partial = [];\n\n// Is the value an array?\n\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n            length = value.length;\n            for (i = 0; i < length; i += 1) {\n                partial[i] = str(i, value, limit) || 'null';\n            }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n            v = partial.length === 0\n                ? '[]'\n                : gap\n                    ? (\n                      gap.length + partial.join(', ').length + 4 > limit ?\n                      '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                      '[ ' + partial.join(', ') + ' ]'\n                    )\n                    : '[' + partial.join(',') + ']';\n            gap = mind;\n            return v;\n        }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n        if (rep && typeof rep === 'object') {\n            length = rep.length;\n            for (i = 0; i < length; i += 1) {\n                if (typeof rep[i] === 'string') {\n                    k = rep[i];\n                    v = str(k, value, limit);\n                    if (v) {\n                        partial.push(quote(k) + (\n                            gap\n                                ? ': '\n                                : ':'\n                        ) + v);\n                    }\n                }\n            }\n        } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = str(k, value, limit);\n                    if (v) {\n                        partial.push(quote(k) + (\n                            gap\n                                ? ': '\n                                : ':'\n                        ) + v);\n                    }\n                }\n            }\n        }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n        v = partial.length === 0\n            ? '{}'\n            : gap\n                ? (\n                  gap.length + partial.join(', ').length + 4 > limit ?\n                  '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n                  '{ ' + partial.join(', ') + ' }'\n                )\n                : '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\n\nfunction beautify (value, replacer, space, limit) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n  var i;\n  gap = '';\n  indent = '';\n\n  if (!limit) limit = 0;\n\n  if (typeof limit !== \"number\")\n    throw new Error(\"beaufifier: limit must be a number\");\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n  if (typeof space === 'number') {\n      for (i = 0; i < space; i += 1) {\n          indent += ' ';\n      }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n  } else if (typeof space === 'string') {\n      indent = space;\n  }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n  rep = replacer;\n  if (replacer && typeof replacer !== 'function' &&\n          (typeof replacer !== 'object' ||\n          typeof replacer.length !== 'number')) {\n      throw new Error('beautifier: wrong replacer parameter');\n  }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n  return str('', {'': value}, limit);\n}\n\nmodule.exports = beautify;\n"],
  "mappings": "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",
  "names": []
}
